
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 10 21:08:18 CST 2011
//----------------------------------------------------

package querymanager.syntax;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 10 21:08:18 CST 2011
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\003\004\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\004\007\000\002\021\003\000\002\021\003\000\002\021" +
    "\002\000\002\005\003\000\002\005\005\000\002\022\003" +
    "\000\002\022\004\000\002\022\002\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\023\003\000\002" +
    "\023\003\000\002\023\005\000\002\024\003\000\002\024" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\026\007\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\006\003\000\002\006\005\000\002\013" +
    "\003\000\002\013\004\000\002\013\005\000\002\013\006" +
    "\000\002\030\005\000\002\031\004\000\002\031\002\000" +
    "\002\010\003\000\002\010\005\000\002\007\003\000\002" +
    "\007\005\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\006\000\002\032\006\000\002\032\005\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\035\007" +
    "\000\002\035\007\000\002\035\007\000\002\035\007\000" +
    "\002\035\010\000\002\035\010\000\002\035\010\000\002" +
    "\035\010\000\002\036\007\000\002\036\010\000\002\036" +
    "\005\000\002\036\006\000\002\037\003\000\002\037\003" +
    "\000\002\037\005\000\002\037\005\000\002\040\005\000" +
    "\002\040\006\000\002\041\005\000\002\041\006\000\002" +
    "\042\004\000\002\042\005\000\002\043\005\000\002\043" +
    "\007\000\002\043\002\000\002\044\005\000\002\044\006" +
    "\000\002\044\006\000\002\044\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\006\012\013\112\015\001\002\000\004\002" +
    "\257\001\002\000\026\002\uffd2\033\uffd2\036\uffd2\042\112" +
    "\057\uffd2\060\uffd2\061\uffd2\113\uffd2\127\uffd2\130\uffd2\001" +
    "\002\000\012\002\000\057\021\060\020\061\022\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\ufffc\001\002\000\004\002\uffff\001\002\000\024" +
    "\025\026\032\ufff2\040\ufff2\041\ufff2\043\ufff2\044\ufff2\056" +
    "\027\117\ufff2\134\ufff2\001\002\000\004\002\ufffe\001\002" +
    "\000\006\012\013\112\015\001\002\000\012\057\021\060" +
    "\020\061\022\113\017\001\002\000\024\002\ufff9\033\ufff9" +
    "\036\ufff9\057\ufff9\060\ufff9\061\ufff9\113\ufff9\127\ufff9\130" +
    "\ufff9\001\002\000\006\012\013\112\015\001\002\000\006" +
    "\012\013\112\015\001\002\000\006\012\013\112\015\001" +
    "\002\000\024\002\ufff7\033\ufff7\036\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\113\ufff7\127\ufff7\130\ufff7\001\002\000\024\002" +
    "\ufff6\033\ufff6\036\ufff6\057\ufff6\060\ufff6\061\ufff6\113\ufff6" +
    "\127\ufff6\130\ufff6\001\002\000\024\002\ufff8\033\ufff8\036" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\113\ufff8\127\ufff8\130\ufff8" +
    "\001\002\000\020\032\ufff4\040\ufff4\041\ufff4\043\ufff4\044" +
    "\ufff4\117\ufff4\134\ufff4\001\002\000\020\032\ufff3\040\ufff3" +
    "\041\ufff3\043\ufff3\044\ufff3\117\ufff3\134\ufff3\001\002\000" +
    "\020\032\036\040\033\041\032\043\040\044\045\117\041" +
    "\134\043\001\002\000\022\024\uffed\054\057\107\uffed\115" +
    "\uffed\116\uffed\117\uffed\120\uffed\134\056\001\002\000\004" +
    "\112\uffdd\001\002\000\004\112\uffde\001\002\000\016\024" +
    "\ufff1\107\076\115\100\116\102\117\077\120\101\001\002" +
    "\000\004\024\063\001\002\000\004\112\uffdf\001\002\000" +
    "\022\024\uffed\054\057\107\uffed\115\uffed\116\uffed\117\uffed" +
    "\120\uffed\134\056\001\002\000\004\112\uffdb\001\002\000" +
    "\024\024\uffe8\054\uffe8\107\uffe8\113\uffe8\115\uffe8\116\uffe8" +
    "\117\uffe8\120\uffe8\134\uffe8\001\002\000\022\024\uffed\054" +
    "\057\107\uffed\115\uffed\116\uffed\117\uffed\120\uffed\134\056" +
    "\001\002\000\026\024\uffe6\054\uffe6\107\uffe6\113\uffe6\114" +
    "\053\115\uffe6\116\uffe6\117\uffe6\120\uffe6\134\uffe6\001\002" +
    "\000\004\112\047\001\002\000\004\112\uffdc\001\002\000" +
    "\024\024\uffe9\054\uffe9\107\uffe9\113\uffe9\115\uffe9\116\uffe9" +
    "\117\uffe9\120\uffe9\134\uffe9\001\002\000\012\025\026\056" +
    "\027\117\ufff2\134\ufff2\001\002\000\006\117\041\134\043" +
    "\001\002\000\004\113\052\001\002\000\022\024\uffe0\054" +
    "\uffe0\107\uffe0\115\uffe0\116\uffe0\117\uffe0\120\uffe0\134\uffe0" +
    "\001\002\000\006\117\055\134\054\001\002\000\100\002" +
    "\uffe5\024\uffe5\026\uffe5\027\uffe5\031\uffe5\033\uffe5\034\uffe5" +
    "\036\uffe5\052\uffe5\054\uffe5\057\uffe5\060\uffe5\061\uffe5\067" +
    "\uffe5\105\uffe5\106\uffe5\107\uffe5\113\uffe5\115\uffe5\116\uffe5" +
    "\117\uffe5\120\uffe5\121\uffe5\122\uffe5\123\uffe5\124\uffe5\125" +
    "\uffe5\126\uffe5\127\uffe5\130\uffe5\134\uffe5\001\002\000\024" +
    "\024\uffe7\054\uffe7\107\uffe7\113\uffe7\115\uffe7\116\uffe7\117" +
    "\uffe7\120\uffe7\134\uffe7\001\002\000\022\024\uffef\054\uffef" +
    "\107\uffef\115\uffef\116\uffef\117\uffef\120\uffef\134\uffef\001" +
    "\002\000\004\134\061\001\002\000\022\024\uffec\054\uffec" +
    "\107\uffec\115\uffec\116\uffec\117\uffec\120\uffec\134\uffec\001" +
    "\002\000\022\024\uffee\054\uffee\107\uffee\115\uffee\116\uffee" +
    "\117\uffee\120\uffee\134\uffee\001\002\000\022\024\uffea\054" +
    "\uffea\107\uffea\115\uffea\116\uffea\117\uffea\120\uffea\134\uffea" +
    "\001\002\000\006\112\067\134\064\001\002\000\032\002" +
    "\uffd8\033\uffd8\036\uffd8\042\uffd8\057\uffd8\060\uffd8\061\uffd8" +
    "\107\uffd8\113\uffd8\127\uffd8\130\uffd8\134\075\001\002\000" +
    "\030\002\uffda\033\uffda\036\uffda\042\uffda\057\uffda\060\uffda" +
    "\061\uffda\107\073\113\uffda\127\uffda\130\uffda\001\002\000" +
    "\026\002\ufff5\033\ufff5\036\ufff5\042\ufff5\057\ufff5\060\ufff5" +
    "\061\ufff5\113\ufff5\127\ufff5\130\ufff5\001\002\000\006\012" +
    "\013\112\015\001\002\000\012\057\021\060\020\061\022" +
    "\113\071\001\002\000\032\002\uffd6\033\uffd6\036\uffd6\042" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\107\uffd6\113\uffd6\127\uffd6" +
    "\130\uffd6\134\072\001\002\000\030\002\uffd5\033\uffd5\036" +
    "\uffd5\042\uffd5\057\uffd5\060\uffd5\061\uffd5\107\uffd5\113\uffd5" +
    "\127\uffd5\130\uffd5\001\002\000\006\112\067\134\064\001" +
    "\002\000\026\002\uffd9\033\uffd9\036\uffd9\042\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\113\uffd9\127\uffd9\130\uffd9\001\002\000" +
    "\030\002\uffd7\033\uffd7\036\uffd7\042\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\107\uffd7\113\uffd7\127\uffd7\130\uffd7\001\002\000" +
    "\020\032\036\040\033\041\032\043\040\044\045\117\041" +
    "\134\043\001\002\000\020\032\036\040\033\041\032\043" +
    "\040\044\045\117\041\134\043\001\002\000\020\032\036" +
    "\040\033\041\032\043\040\044\045\117\041\134\043\001" +
    "\002\000\020\032\036\040\033\041\032\043\040\044\045" +
    "\117\041\134\043\001\002\000\020\032\036\040\033\041" +
    "\032\043\040\044\045\117\041\134\043\001\002\000\022" +
    "\024\uffe3\054\uffe3\107\uffe3\115\uffe3\116\uffe3\117\077\120" +
    "\101\134\uffe3\001\002\000\022\024\uffe1\054\uffe1\107\uffe1" +
    "\115\uffe1\116\uffe1\117\uffe1\120\uffe1\134\uffe1\001\002\000" +
    "\022\024\uffe4\054\uffe4\107\uffe4\115\uffe4\116\uffe4\117\077" +
    "\120\101\134\uffe4\001\002\000\022\024\uffe2\054\uffe2\107" +
    "\uffe2\115\uffe2\116\uffe2\117\uffe2\120\uffe2\134\uffe2\001\002" +
    "\000\004\024\ufff0\001\002\000\022\024\uffeb\054\uffeb\107" +
    "\uffeb\115\uffeb\116\uffeb\117\uffeb\120\uffeb\134\uffeb\001\002" +
    "\000\024\002\uffa3\033\244\036\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\113\uffa3\127\uffa3\130\uffa3\001\002\000\010\052\126" +
    "\104\120\134\123\001\002\000\024\002\ufffa\033\ufffa\036" +
    "\ufffa\057\ufffa\060\ufffa\061\ufffa\113\ufffa\127\ufffa\130\ufffa" +
    "\001\002\000\024\002\uffcc\033\uffcc\036\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\113\uffcc\127\uffcc\130\uffcc\001\002\000\024" +
    "\002\uffc8\033\uffc8\036\uffc8\057\uffc8\060\uffc8\061\uffc8\113" +
    "\uffc8\127\uffc8\130\uffc8\001\002\000\024\002\uffcf\033\uffcf" +
    "\036\uffcf\057\uffcf\060\uffcf\061\uffcf\113\uffcf\127\241\130" +
    "\uffcf\001\002\000\024\002\uffd1\033\uffd1\036\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\113\uffd1\127\uffd1\130\237\001\002\000" +
    "\006\012\013\112\015\001\002\000\024\002\uffc9\033\uffc9" +
    "\036\uffc9\057\uffc9\060\uffc9\061\uffc9\113\uffc9\127\uffc9\130" +
    "\uffc9\001\002\000\024\002\uffca\033\uffca\036\uffca\057\uffca" +
    "\060\uffca\061\uffca\113\uffca\127\uffca\130\uffca\001\002\000" +
    "\062\002\uffe6\026\uffe6\027\uffe6\031\uffe6\033\uffe6\034\uffe6" +
    "\036\uffe6\052\uffe6\057\uffe6\060\uffe6\061\uffe6\067\uffe6\105" +
    "\uffe6\106\uffe6\113\uffe6\114\235\121\uffe6\122\uffe6\123\uffe6" +
    "\124\uffe6\125\uffe6\126\uffe6\127\uffe6\130\uffe6\001\002\000" +
    "\024\002\uffcd\033\uffcd\036\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\113\uffcd\127\uffcd\130\uffcd\001\002\000\024\002\uffd3\033" +
    "\uffd3\036\uffd3\057\uffd3\060\uffd3\061\uffd3\113\uffd3\127\uffd3" +
    "\130\uffd3\001\002\000\004\104\233\001\002\000\024\002" +
    "\uffcb\033\uffcb\036\uffcb\057\uffcb\060\uffcb\061\uffcb\113\uffcb" +
    "\127\uffcb\130\uffcb\001\002\000\030\026\143\027\131\031" +
    "\136\052\140\067\144\121\134\122\133\123\142\124\135" +
    "\125\137\126\132\001\002\000\006\012\013\112\227\001" +
    "\002\000\020\012\uffbc\056\uffbc\102\uffbc\112\uffbc\131\uffbc" +
    "\133\uffbc\134\uffbc\001\002\000\020\012\uffc0\056\uffc0\102" +
    "\uffc0\112\uffc0\131\uffc0\133\uffc0\134\uffc0\001\002\000\020" +
    "\012\uffc1\056\uffc1\102\uffc1\112\uffc1\131\uffc1\133\uffc1\134" +
    "\uffc1\001\002\000\020\012\uffbe\056\uffbe\102\uffbe\112\uffbe" +
    "\131\uffbe\133\uffbe\134\uffbe\001\002\000\014\012\013\112" +
    "\015\131\215\133\214\134\123\001\002\000\020\012\uffbd" +
    "\056\uffbd\102\uffbd\112\uffbd\131\uffbd\133\uffbd\134\uffbd\001" +
    "\002\000\010\026\161\027\162\031\163\001\002\000\020" +
    "\012\013\056\154\102\152\112\015\131\153\133\155\134" +
    "\123\001\002\000\020\012\uffbf\056\uffbf\102\uffbf\112\uffbf" +
    "\131\uffbf\133\uffbf\134\uffbf\001\002\000\004\133\150\001" +
    "\002\000\006\052\145\053\146\001\002\000\004\053\147" +
    "\001\002\000\024\002\uffa9\033\uffa9\036\uffa9\057\uffa9\060" +
    "\uffa9\061\uffa9\113\uffa9\127\uffa9\130\uffa9\001\002\000\024" +
    "\002\uffa8\033\uffa8\036\uffa8\057\uffa8\060\uffa8\061\uffa8\113" +
    "\uffa8\127\uffa8\130\uffa8\001\002\000\024\002\uffab\033\uffab" +
    "\036\uffab\057\uffab\060\uffab\061\uffab\113\uffab\127\uffab\130" +
    "\uffab\001\002\000\024\002\uffc2\033\uffc2\036\uffc2\057\021" +
    "\060\020\061\022\113\uffc2\127\uffc2\130\uffc2\001\002\000" +
    "\006\012\013\112\015\001\002\000\024\002\uffc6\033\uffc6" +
    "\036\uffc6\057\uffc6\060\uffc6\061\uffc6\113\uffc6\127\uffc6\130" +
    "\uffc6\001\002\000\006\012\013\112\015\001\002\000\024" +
    "\002\uffc5\033\uffc5\036\uffc5\057\uffc5\060\uffc5\061\uffc5\113" +
    "\uffc5\127\uffc5\130\uffc5\001\002\000\024\002\uffc7\033\uffc7" +
    "\036\uffc7\057\uffc7\060\uffc7\061\uffc7\113\uffc7\127\uffc7\130" +
    "\uffc7\001\002\000\024\002\uffc3\033\uffc3\036\uffc3\057\021" +
    "\060\020\061\022\113\uffc3\127\uffc3\130\uffc3\001\002\000" +
    "\024\002\uffc4\033\uffc4\036\uffc4\057\021\060\020\061\022" +
    "\113\uffc4\127\uffc4\130\uffc4\001\002\000\004\133\212\001" +
    "\002\000\006\012\013\112\200\001\002\000\014\012\013" +
    "\112\015\131\166\133\165\134\123\001\002\000\004\127" +
    "\176\001\002\000\004\127\174\001\002\000\004\127\172" +
    "\001\002\000\012\057\021\060\020\061\022\127\170\001" +
    "\002\000\006\012\013\112\015\001\002\000\024\002\uffb4" +
    "\033\uffb4\036\uffb4\057\uffb4\060\uffb4\061\uffb4\113\uffb4\127" +
    "\uffb4\130\uffb4\001\002\000\004\131\173\001\002\000\024" +
    "\002\uffb6\033\uffb6\036\uffb6\057\uffb6\060\uffb6\061\uffb6\113" +
    "\uffb6\127\uffb6\130\uffb6\001\002\000\004\133\175\001\002" +
    "\000\024\002\uffb5\033\uffb5\036\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\113\uffb5\127\uffb5\130\uffb5\001\002\000\004\134\123" +
    "\001\002\000\024\002\uffb7\033\uffb7\036\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\113\uffb7\127\uffb7\130\uffb7\001\002\000\012" +
    "\012\013\112\015\131\204\133\203\001\002\000\024\002" +
    "\uffb0\033\uffb0\036\uffb0\057\021\060\020\061\022\113\uffb0" +
    "\127\uffb0\130\uffb0\001\002\000\004\113\211\001\002\000" +
    "\006\107\207\113\uffae\001\002\000\006\107\205\113\uffaf" +
    "\001\002\000\006\131\204\133\203\001\002\000\004\113" +
    "\uffac\001\002\000\006\131\204\133\203\001\002\000\004" +
    "\113\uffad\001\002\000\024\002\uffb2\033\uffb2\036\uffb2\057" +
    "\uffb2\060\uffb2\061\uffb2\113\uffb2\127\uffb2\130\uffb2\001\002" +
    "\000\024\002\uffaa\033\uffaa\036\uffaa\057\uffaa\060\uffaa\061" +
    "\uffaa\113\uffaa\127\uffaa\130\uffaa\001\002\000\004\127\225" +
    "\001\002\000\004\127\223\001\002\000\004\127\221\001" +
    "\002\000\012\057\021\060\020\061\022\127\217\001\002" +
    "\000\006\012\013\112\015\001\002\000\024\002\uffb8\033" +
    "\uffb8\036\uffb8\057\uffb8\060\uffb8\061\uffb8\113\uffb8\127\uffb8" +
    "\130\uffb8\001\002\000\004\131\222\001\002\000\024\002" +
    "\uffba\033\uffba\036\uffba\057\uffba\060\uffba\061\uffba\113\uffba" +
    "\127\uffba\130\uffba\001\002\000\004\133\224\001\002\000" +
    "\024\002\uffb9\033\uffb9\036\uffb9\057\uffb9\060\uffb9\061\uffb9" +
    "\113\uffb9\127\uffb9\130\uffb9\001\002\000\004\134\123\001" +
    "\002\000\024\002\uffbb\033\uffbb\036\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\113\uffbb\127\uffbb\130\uffbb\001\002\000\012\012" +
    "\013\112\015\131\204\133\203\001\002\000\024\002\uffb1" +
    "\033\uffb1\036\uffb1\057\021\060\020\061\022\113\uffb1\127" +
    "\uffb1\130\uffb1\001\002\000\004\113\232\001\002\000\024" +
    "\002\uffb3\033\uffb3\036\uffb3\057\uffb3\060\uffb3\061\uffb3\113" +
    "\uffb3\127\uffb3\130\uffb3\001\002\000\006\012\013\112\015" +
    "\001\002\000\024\002\uffa6\033\uffa6\036\uffa6\057\021\060" +
    "\020\061\022\113\uffa6\127\uffa6\130\uffa6\001\002\000\004" +
    "\134\054\001\002\000\024\002\uffa7\033\uffa7\036\uffa7\057" +
    "\021\060\020\061\022\113\uffa7\127\uffa7\130\uffa7\001\002" +
    "\000\010\052\126\104\120\134\123\001\002\000\024\002" +
    "\uffd0\033\uffd0\036\uffd0\057\uffd0\060\uffd0\061\uffd0\113\uffd0" +
    "\127\uffd0\130\uffd0\001\002\000\010\052\126\104\120\134" +
    "\123\001\002\000\024\002\uffce\033\uffce\036\uffce\057\uffce" +
    "\060\uffce\061\uffce\113\uffce\127\uffce\130\uffce\001\002\000" +
    "\024\002\uff9f\033\uff9f\036\251\057\uff9f\060\uff9f\061\uff9f" +
    "\113\uff9f\127\uff9f\130\uff9f\001\002\000\004\035\245\001" +
    "\002\000\004\134\123\001\002\000\026\002\uffa5\033\uffa5" +
    "\034\247\036\uffa5\057\uffa5\060\uffa5\061\uffa5\113\uffa5\127" +
    "\uffa5\130\uffa5\001\002\000\010\052\126\104\120\134\123" +
    "\001\002\000\024\002\uffa4\033\uffa4\036\uffa4\057\uffa4\060" +
    "\uffa4\061\uffa4\113\uffa4\127\uffa4\130\uffa4\001\002\000\004" +
    "\035\253\001\002\000\024\002\uffd4\033\uffd4\036\uffd4\057" +
    "\uffd4\060\uffd4\061\uffd4\113\uffd4\127\uffd4\130\uffd4\001\002" +
    "\000\004\134\123\001\002\000\030\002\uffa2\033\uffa2\036" +
    "\uffa2\057\uffa2\060\uffa2\061\uffa2\105\255\106\256\113\uffa2" +
    "\127\uffa2\130\uffa2\001\002\000\024\002\uffa1\033\uffa1\036" +
    "\uffa1\057\uffa1\060\uffa1\061\uffa1\113\uffa1\127\uffa1\130\uffa1" +
    "\001\002\000\024\002\uffa0\033\uffa0\036\uffa0\057\uffa0\060" +
    "\uffa0\061\uffa0\113\uffa0\127\uffa0\130\uffa0\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\022\002\003\003\005\004\004\014\011\015" +
    "\013\016\006\017\010\020\007\001\001\000\002\001\001" +
    "\000\006\030\112\031\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\027\001\001\000\002\001\001\000" +
    "\006\003\015\004\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\024\004\004\001\001\000\006\003" +
    "\023\004\004\001\001\000\006\003\022\004\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\034\012\033" +
    "\023\041\024\045\025\030\026\036\027\043\001\001\000" +
    "\004\022\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\047" +
    "\001\001\000\006\023\050\024\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\065\013\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\067\004\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\073\013\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\106\012\033\023\041\024\045\025" +
    "\030\026\036\027\043\001\001\000\016\012\105\023\041" +
    "\024\045\025\030\026\036\027\043\001\001\000\016\012" +
    "\104\023\041\024\045\025\030\026\036\027\043\001\001" +
    "\000\016\012\103\023\041\024\045\025\030\026\036\027" +
    "\043\001\001\000\016\012\102\023\041\024\045\025\030" +
    "\026\036\027\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\242\001\001\000\026\007" +
    "\116\010\124\011\115\024\127\032\123\035\113\036\126" +
    "\040\121\041\120\042\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\235\004\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\140\001\001\000\006\003\227\004\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\215\004\004\024\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\150\004" +
    "\004\024\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\157\004\004\001\001\000\002\001\001\000\006\003" +
    "\156\004\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\200\004\004\001\001\000\010\003\166\004\004" +
    "\024\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\170\004\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\176" +
    "\001\001\000\002\001\001\000\010\003\015\004\004\037" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\205\001\001\000" +
    "\002\001\001\000\004\037\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\217\004\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\225\001\001\000\002\001\001\000\010\003" +
    "\015\004\004\037\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\233\004\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\007\116\010\237\011\115\024\127\032\123\035" +
    "\113\036\126\040\121\041\120\042\114\001\001\000\002" +
    "\001\001\000\024\007\241\011\115\024\127\032\123\035" +
    "\113\036\126\040\121\041\120\042\114\001\001\000\002" +
    "\001\001\000\004\044\251\001\001\000\002\001\001\000" +
    "\004\024\245\001\001\000\002\001\001\000\026\007\116" +
    "\010\247\011\115\024\127\032\123\035\113\036\126\040" +
    "\121\041\120\042\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
return getScanner().next_token();
    }


	ErrorMsg.ErrorMsg errorMsg;
	public DBParser(java_cup.runtime.Scanner s, ErrorMsg.ErrorMsg errorMsg){
		super(s);
		this.errorMsg = errorMsg;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // orderByList ::= 
            {
              OrderExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("orderByList",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // orderByList ::= ORDER BY fieldID DESC 
            {
              OrderExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new OrderExp(f, AscOrDesc.DESC);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("orderByList",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // orderByList ::= ORDER BY fieldID ASC 
            {
              OrderExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new OrderExp(f, AscOrDesc.ASC);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("orderByList",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // orderByList ::= ORDER BY fieldID 
            {
              OrderExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OrderExp(f, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("orderByList",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // groupByList ::= 
            {
              GroupExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("groupByList",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // groupByList ::= GROUP BY fieldID HAVING conditionLists 
            {
              GroupExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int clsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConditionExpLists cls = (ConditionExpLists)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new GroupExp(f, cls);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("groupByList",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // groupByList ::= GROUP BY fieldID 
            {
              GroupExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new GroupExp(f, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("groupByList",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // notExistExp ::= NOT EXISTS queryExp 
            {
              ExistConditionExp RESULT =null;
		RESULT = new ExistConditionExp(true, q);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("notExistExp",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // notExistExp ::= EXISTS queryExp 
            {
              ExistConditionExp RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		QueryExp q = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExistConditionExp(false, q);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("notExistExp",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // nullExp ::= fieldID IS NOT NULL 
            {
              IsNotNullConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new IsNotNullConditionExp(f, true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nullExp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // nullExp ::= fieldID IS NULL 
            {
              IsNotNullConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new IsNotNullConditionExp(f, false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nullExp",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // likeExp ::= fieldID NOT LIKE STRING 
            {
              LikeConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LikeConditionExp(f,new MatchPattern(s), true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("likeExp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // likeExp ::= fieldID LIKE STRING 
            {
              LikeConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LikeConditionExp(f,new MatchPattern(s), false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("likeExp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valueList ::= NUMBER COMMA valueList 
            {
              ConstantList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConstantList vl = (ConstantList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ConstantList(new Constant(n), vl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valueList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valueList ::= STRING COMMA valueList 
            {
              ConstantList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConstantList vl = (ConstantList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ConstantList(new Constant(s), vl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valueList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valueList ::= STRING 
            {
              ConstantList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ConstantList(new Constant(s), null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valueList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valueList ::= NUMBER 
            {
              ConstantList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ConstantList(new Constant(n), null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valueList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // inOrNotExp ::= fieldID NOT IN queryExp 
            {
              InOrNotConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		QueryExp q = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new QueryInOrNotConditionExp(f,q,true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inOrNotExp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // inOrNotExp ::= fieldID IN queryExp 
            {
              InOrNotConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		QueryExp q = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new QueryInOrNotConditionExp(f,q,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inOrNotExp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // inOrNotExp ::= fieldID NOT IN LPAREN valueList RPAREN 
            {
              InOrNotConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ConstantList vl = (ConstantList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ValueListInOrNotConditionExp(f, vl, true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inOrNotExp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // inOrNotExp ::= fieldID IN LPAREN valueList RPAREN 
            {
              InOrNotConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ConstantList vl = (ConstantList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ValueListInOrNotConditionExp(f, vl, false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inOrNotExp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // rangeExp ::= fieldID NOT BETWEEN queryExp AND queryExp 
            {
              RangeConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int q1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		QueryExp q1 = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		QueryExp q2 = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new QueryRangeConditionExp(f, q1, q2, true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangeExp",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // rangeExp ::= fieldID NOT BETWEEN STRING AND STRING 
            {
              RangeConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ConstantRangeConditionExp(f,new Constant(s1), new Constant(s2), true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangeExp",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // rangeExp ::= fieldID NOT BETWEEN NUMBER AND NUMBER 
            {
              RangeConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ConstantRangeConditionExp(f,new Constant(n1), new Constant(n2), true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangeExp",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // rangeExp ::= fieldID NOT BETWEEN fieldID AND fieldID 
            {
              RangeConditionExp RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ParameterExp f1 = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterExp f2 = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int f3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterExp f3 = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParameterRangeConditionExp(f1,f2,f3,true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangeExp",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // rangeExp ::= fieldID BETWEEN queryExp AND queryExp 
            {
              RangeConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int q1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		QueryExp q1 = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		QueryExp q2 = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new QueryRangeConditionExp(f, q1, q2, false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangeExp",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // rangeExp ::= fieldID BETWEEN STRING AND STRING 
            {
              RangeConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ConstantRangeConditionExp(f,new Constant(s1), new Constant(s2), false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangeExp",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // rangeExp ::= fieldID BETWEEN NUMBER AND NUMBER 
            {
              RangeConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ConstantRangeConditionExp(f,new Constant(n1), new Constant(n2), false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangeExp",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // rangeExp ::= fieldID BETWEEN fieldID AND fieldID 
            {
              RangeConditionExp RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParameterExp f1 = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterExp f2 = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int f3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterExp f3 = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParameterRangeConditionExp(f1,f2,f3,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rangeExp",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // compareOp ::= GE 
            {
              CompareOp RESULT =null;
		RESULT = CompareOp.GE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareOp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // compareOp ::= GT 
            {
              CompareOp RESULT =null;
		RESULT = CompareOp.GT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareOp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // compareOp ::= LE 
            {
              CompareOp RESULT =null;
		RESULT = CompareOp.LE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareOp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // compareOp ::= LT 
            {
              CompareOp RESULT =null;
		RESULT = CompareOp.LT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareOp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // compareOp ::= NEQ 
            {
              CompareOp RESULT =null;
		RESULT = CompareOp.NEQ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareOp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // compareOp ::= EQ 
            {
              CompareOp RESULT =null;
		RESULT = CompareOp.EQ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareOp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // compareExp ::= fieldID compareOp queryExp 
            {
              CompareConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CompareOp c = (CompareOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		QueryExp q = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new QueryCompareCondition(f,c,q,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareExp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // compareExp ::= fieldID compareOp ALL queryExp 
            {
              CompareConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CompareOp c = (CompareOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		QueryExp q = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new QueryCompareCondition(f,c,q,AnyOrAll.ALL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareExp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // compareExp ::= fieldID compareOp ANY queryExp 
            {
              CompareConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CompareOp c = (CompareOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		QueryExp q = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new QueryCompareCondition(f,c,q,AnyOrAll.ANY);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareExp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // compareExp ::= fieldID compareOp STRING 
            {
              CompareConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CompareOp c = (CompareOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ConstantCompareConditionExp(f,c,new Constant(s));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareExp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // compareExp ::= fieldID compareOp NUMBER 
            {
              CompareConditionExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CompareOp c = (CompareOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ConstantCompareConditionExp(f,c,new Constant(n));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareExp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // compareExp ::= fieldID compareOp fieldID 
            {
              CompareConditionExp RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterExp f1 = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CompareOp c = (CompareOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterExp f2 = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParameterCompareConditionExp(f1,c,f2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compareExp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condition ::= notExistExp 
            {
              ConditionExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExistConditionExp n = (ExistConditionExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = n;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condition ::= nullExp 
            {
              ConditionExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IsNotNullConditionExp n = (IsNotNullConditionExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = n;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condition ::= likeExp 
            {
              ConditionExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LikeConditionExp l = (LikeConditionExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condition ::= inOrNotExp 
            {
              ConditionExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InOrNotConditionExp i = (InOrNotConditionExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condition ::= rangeExp 
            {
              ConditionExp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RangeConditionExp r = (RangeConditionExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condition ::= compareExp 
            {
              ConditionExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CompareConditionExp c = (CompareConditionExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // conditionList ::= condition AND conditionList 
            {
              ConditionExpList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ConditionExp c = (ConditionExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConditionExpList cl = (ConditionExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ConditionExpList(c, cl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // conditionList ::= condition 
            {
              ConditionExpList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConditionExp c = (ConditionExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ConditionExpList(c,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // conditionLists ::= conditionList OR conditionLists 
            {
              ConditionExpLists RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ConditionExpList cl = (ConditionExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int clsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConditionExpLists cls = (ConditionExpLists)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ConditionExpLists(cl,cls);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionLists",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // conditionLists ::= conditionList 
            {
              ConditionExpLists RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConditionExpList cl = (ConditionExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ConditionExpLists(cl, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionLists",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // whereList ::= 
            {
              WhereExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whereList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // whereList ::= WHERE conditionLists 
            {
              WhereExp RESULT =null;
		int clsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConditionExpLists cls = (ConditionExpLists)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new WhereExp(cls);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whereList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // optionalList ::= whereList groupByList orderByList 
            {
              OptionalExp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		WhereExp w = (WhereExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		GroupExp g = (GroupExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OrderExp o = (OrderExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OptionalExp(w,g,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optionalList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relation ::= LPAREN queryExp RPAREN ID 
            {
              FromExp RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		QueryExp q = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new FromExp(null, i, q);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relation",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relation ::= LPAREN queryExp RPAREN 
            {
              FromExp RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		QueryExp q = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new FromExp(null, null, q);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relation",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relation ::= ID ID 
            {
              FromExp RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new FromExp(i1, i2, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relation",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relation ::= ID 
            {
              FromExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new FromExp(i, null, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relation",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relationList ::= relation COMMA relationList 
            {
              FromExpList RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FromExp r = (FromExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FromExpList rl = (FromExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new FromExpList(r, rl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // relationList ::= relation 
            {
              FromExpList RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FromExp r = (FromExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new FromExpList(r, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // aggregationOp ::= MAX 
            {
              AggregationOp RESULT =null;
		RESULT = Aggregation.MAX;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregationOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // aggregationOp ::= MIN 
            {
              AggregationOp RESULT =null;
		RESULT = Aggregation.MIN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregationOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // aggregationOp ::= AVG 
            {
              AggregationOp RESULT =null;
		RESULT = Aggregation.AVG;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregationOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // aggregationOp ::= SUM 
            {
              AggregationOp RESULT =null;
		RESULT = Aggregation.SUM;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregationOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // aggregationOp ::= COUNT 
            {
              AggregationOp RESULT =null;
		RESULT = Aggregation.COUNT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggregationOp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // aggrAttribute ::= aggregationOp LPAREN distinctOrAll columnID RPAREN 
            {
              AggregationExp RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AggregationOp ao = (AggregationOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DisOrAll d = (DisOrAll)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParameterExp c = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		new AggregationExp(ao, d, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aggrAttribute",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mathExp ::= attribute DEVIDE attribute 
            {
              MathExp RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TargetExp a1 = (TargetExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TargetExp a2 = (TargetExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new MathExp(a1, a2, MathOp.DEVIDE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mathExp ::= attribute STAR attribute 
            {
              MathExp RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TargetExp a1 = (TargetExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TargetExp a2 = (TargetExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new MathExp(a1, a2, MathOp.TIMES);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mathExp ::= attribute MINUS attribute 
            {
              MathExp RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TargetExp a1 = (TargetExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TargetExp a2 = (TargetExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new MathExp(a1, a2, MathOp.MINUS);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // mathExp ::= attribute PLUS attribute 
            {
              MathExp RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TargetExp a1 = (TargetExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TargetExp a2 = (TargetExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new MathExp(a1, a2, MathOp.PLUS);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mathExp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fieldID ::= ID DOT ID 
            {
              ParameterExp RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParameterExp(i1, i2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldID",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fieldID ::= ID 
            {
              ParameterExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParameterExp(null, i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldID",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // columnID ::= ID DOT STAR 
            {
              ParameterExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new ParameterExp(i, ParameterExp.STAR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("columnID",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // columnID ::= STAR 
            {
              ParameterExp RESULT =null;
		RESULT = new ParameterExp(null, ParameterExp.STAR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("columnID",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // columnID ::= fieldID 
            {
              ParameterExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParameterExp f = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = f
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("columnID",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // attribute ::= aggrAttribute nickName 
            {
              TargetExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AggregationExp a = (AggregationExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AggregationTargetExp(a, n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // attribute ::= mathExp nickName 
            {
              TargetExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MathExp m = (MathExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpressionTargetExp(m, n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // attribute ::= columnID nickName 
            {
              TargetExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParameterExp c = (ParameterExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParameterTargetExp(c, n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nickName ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nickName",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nickName ::= AS ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nickName",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nickName ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nickName",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // attributeList ::= attribute COMMA attributeList 
            {
              TargetExpList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TargetExp a = (TargetExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TargetExpList al = (TargetExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new TargetExpList(a, al);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // attributeList ::= attribute 
            {
              TargetExpList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TargetExp a = (TargetExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new TargetExpList(a, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // distinctOrAll ::= 
            {
              DisOrAll RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("distinctOrAll",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // distinctOrAll ::= ALL 
            {
              DisOrAll RESULT =null;
		RESULT = DisOrAll.ALL;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("distinctOrAll",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // distinctOrAll ::= DISTINCT 
            {
              DisOrAll RESULT =null;
		RESULT = DisOrAll.DISTINCT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("distinctOrAll",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // selFrom ::= SELECT distinctOrAll attributeList FROM relationList 
            {
              SelectFromExp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DisOrAll d = (DisOrAll)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TargetExpList at = (TargetExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FromExpList re = (FromExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SelectFromExp(d, at, re);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selFrom",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // queryExp ::= queryExp INTERSECT queryExp 
            {
              QueryExp RESULT =null;
		int q1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		QueryExp q1 = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		QueryExp q2 = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SetQueryExp(q1, q2, SetQueryExp.INTERSECT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("queryExp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // queryExp ::= queryExp UNION queryExp 
            {
              QueryExp RESULT =null;
		int q1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		QueryExp q1 = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		QueryExp q2 = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SetQueryExp(q1, q2, SetQueryExp.UNION);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("queryExp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // queryExp ::= queryExp EXCEPT queryExp 
            {
              QueryExp RESULT =null;
		int q1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		QueryExp q1 = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		QueryExp q2 = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SetQueryExp(q1, q2, SetQueryExp.EXCEPT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("queryExp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // queryExp ::= LPAREN queryExp RPAREN 
            {
              QueryExp RESULT =null;
		int qeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int qeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		QueryExp qe = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = qe;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("queryExp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // queryExp ::= selFrom optionalList 
            {
              QueryExp RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SelectFromExp sf = (SelectFromExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OptionalExp op = (OptionalExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new QueryExp(sf, op);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("queryExp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= alterExp 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= deleteExp 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= insertExp 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction ::= createExp 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruction ::= updateExp 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instruction ::= queryExp 
            {
              Exp RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		QueryExp q = (QueryExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = q;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instruction EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

