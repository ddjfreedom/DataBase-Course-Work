
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jul 24 06:24:08 CST 2011
//----------------------------------------------------

package querymanager.syntax;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jul 24 06:24:08 CST 2011
  */
public class DBParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DBParser() {super();}

  /** Constructor which sets the default scanner. */
  public DBParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DBParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\003\004\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\004\007\000\002\023\003\000\002\023\003\000\002\023" +
    "\002\000\002\006\004\000\002\006\006\000\002\024\003" +
    "\000\002\024\004\000\002\024\002\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\005\000\002\026" +
    "\003\000\002\026\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\031\007\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\007\003\000\002\007\005" +
    "\000\002\013\003\000\002\013\004\000\002\013\005\000" +
    "\002\013\006\000\002\033\005\000\002\034\004\000\002" +
    "\034\002\000\002\010\003\000\002\010\005\000\002\010" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\006\000\002\035\006\000\002\035\005\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\040\010\000" +
    "\002\041\003\000\002\041\002\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\043" +
    "\010\000\002\043\006\000\002\044\003\000\002\044\005" +
    "\000\002\045\003\000\002\045\003\000\002\046\006\000" +
    "\002\047\006\000\002\050\005\000\002\051\006\000\002" +
    "\051\002\000\002\052\004\000\002\052\002\000\002\053" +
    "\006\000\002\053\002\000\002\054\003\000\002\054\003" +
    "\000\002\054\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\006\012\013\112\015\001\002\000\004\002" +
    "\230\001\002\000\026\002\uffce\033\uffce\036\uffce\042\117" +
    "\057\uffce\060\uffce\061\uffce\113\uffce\127\uffce\130\uffce\001" +
    "\002\000\012\002\000\057\021\060\020\061\022\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\ufffc\001\002\000\004\002\uffff\001\002\000\032" +
    "\025\026\032\ufff2\040\ufff2\041\ufff2\043\ufff2\044\ufff2\056" +
    "\027\117\ufff2\131\ufff2\132\ufff2\133\ufff2\134\ufff2\001\002" +
    "\000\004\002\ufffe\001\002\000\006\012\013\112\015\001" +
    "\002\000\012\057\021\060\020\061\022\113\017\001\002" +
    "\000\024\002\ufff9\033\ufff9\036\ufff9\057\ufff9\060\ufff9\061" +
    "\ufff9\113\ufff9\127\ufff9\130\ufff9\001\002\000\006\012\013" +
    "\112\015\001\002\000\006\012\013\112\015\001\002\000" +
    "\006\012\013\112\015\001\002\000\024\002\ufff7\033\ufff7" +
    "\036\ufff7\057\ufff7\060\ufff7\061\ufff7\113\ufff7\127\ufff7\130" +
    "\ufff7\001\002\000\024\002\ufff6\033\ufff6\036\ufff6\057\ufff6" +
    "\060\ufff6\061\ufff6\113\ufff6\127\ufff6\130\ufff6\001\002\000" +
    "\024\002\ufff8\033\ufff8\036\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\113\ufff8\127\ufff8\130\ufff8\001\002\000\026\032\ufff4\040" +
    "\ufff4\041\ufff4\043\ufff4\044\ufff4\117\ufff4\131\ufff4\132\ufff4" +
    "\133\ufff4\134\ufff4\001\002\000\026\032\ufff3\040\ufff3\041" +
    "\ufff3\043\ufff3\044\ufff3\117\ufff3\131\ufff3\132\ufff3\133\ufff3" +
    "\134\ufff3\001\002\000\026\032\047\040\033\041\044\043" +
    "\046\044\045\117\032\131\042\132\051\133\037\134\035" +
    "\001\002\000\012\024\uffe9\054\uffe9\107\uffe9\134\uffe9\001" +
    "\002\000\014\024\uffe7\054\uffe7\107\uffe7\113\uffe7\134\uffe7" +
    "\001\002\000\004\112\uffda\001\002\000\022\024\uffe8\054" +
    "\uffe8\107\uffe8\115\uffdf\116\uffdf\117\uffdf\120\uffdf\134\uffe8" +
    "\001\002\000\026\024\uffe5\054\uffe5\107\uffe5\113\uffe5\114" +
    "\115\115\uffe5\116\uffe5\117\uffe5\120\uffe5\134\uffe5\001\002" +
    "\000\004\024\102\001\002\000\012\024\uffea\054\uffea\107" +
    "\uffea\134\uffea\001\002\000\012\024\uffed\054\075\107\uffed" +
    "\134\074\001\002\000\004\112\067\001\002\000\022\024" +
    "\uffde\054\uffde\107\uffde\115\uffde\116\uffde\117\uffde\120\uffde" +
    "\134\uffde\001\002\000\012\024\uffec\054\uffec\107\uffec\134" +
    "\uffec\001\002\000\004\112\uffd9\001\002\000\004\112\uffd8" +
    "\001\002\000\004\112\uffd7\001\002\000\004\112\uffdb\001" +
    "\002\000\012\115\054\116\056\117\053\120\055\001\002" +
    "\000\022\024\uffdd\054\uffdd\107\uffdd\115\uffdd\116\uffdd\117" +
    "\uffdd\120\uffdd\134\uffdd\001\002\000\012\024\uffeb\054\uffeb" +
    "\107\uffeb\134\uffeb\001\002\000\010\131\042\132\051\134" +
    "\057\001\002\000\010\131\042\132\051\134\057\001\002" +
    "\000\010\131\042\132\051\134\057\001\002\000\010\131" +
    "\042\132\051\134\057\001\002\000\072\002\uffe5\024\uffe5" +
    "\026\uffe5\027\uffe5\031\uffe5\033\uffe5\034\uffe5\036\uffe5\052" +
    "\uffe5\054\uffe5\057\uffe5\060\uffe5\061\uffe5\067\uffe5\105\uffe5" +
    "\106\uffe5\107\uffe5\113\uffe5\114\062\121\uffe5\122\uffe5\123" +
    "\uffe5\124\uffe5\125\uffe5\126\uffe5\127\uffe5\130\uffe5\134\uffe5" +
    "\001\002\000\012\024\uffdf\054\uffdf\107\uffdf\134\uffdf\001" +
    "\002\000\012\024\uffe2\054\uffe2\107\uffe2\134\uffe2\001\002" +
    "\000\004\134\063\001\002\000\100\002\uffe4\024\uffe4\026" +
    "\uffe4\027\uffe4\031\uffe4\033\uffe4\034\uffe4\036\uffe4\052\uffe4" +
    "\054\uffe4\057\uffe4\060\uffe4\061\uffe4\067\uffe4\105\uffe4\106" +
    "\uffe4\107\uffe4\113\uffe4\115\uffe4\116\uffe4\117\uffe4\120\uffe4" +
    "\121\uffe4\122\uffe4\123\uffe4\124\uffe4\125\uffe4\126\uffe4\127" +
    "\uffe4\130\uffe4\134\uffe4\001\002\000\012\024\uffe0\054\uffe0" +
    "\107\uffe0\134\uffe0\001\002\000\012\024\uffe3\054\uffe3\107" +
    "\uffe3\134\uffe3\001\002\000\012\024\uffe1\054\uffe1\107\uffe1" +
    "\134\uffe1\001\002\000\012\025\026\056\027\117\ufff2\134" +
    "\ufff2\001\002\000\006\117\032\134\035\001\002\000\004" +
    "\113\uffe8\001\002\000\004\113\073\001\002\000\012\024" +
    "\uffdc\054\uffdc\107\uffdc\134\uffdc\001\002\000\006\024\uffef" +
    "\107\uffef\001\002\000\004\134\101\001\002\000\006\024" +
    "\ufff1\107\077\001\002\000\026\032\047\040\033\041\044" +
    "\043\046\044\045\117\032\131\042\132\051\133\037\134" +
    "\035\001\002\000\004\024\ufff0\001\002\000\006\024\uffee" +
    "\107\uffee\001\002\000\006\112\106\134\103\001\002\000" +
    "\032\002\uffd4\033\uffd4\036\uffd4\042\uffd4\057\uffd4\060\uffd4" +
    "\061\uffd4\107\uffd4\113\uffd4\127\uffd4\130\uffd4\134\114\001" +
    "\002\000\030\002\uffd6\033\uffd6\036\uffd6\042\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\107\112\113\uffd6\127\uffd6\130\uffd6\001" +
    "\002\000\026\002\ufff5\033\ufff5\036\ufff5\042\ufff5\057\ufff5" +
    "\060\ufff5\061\ufff5\113\ufff5\127\ufff5\130\ufff5\001\002\000" +
    "\006\012\013\112\015\001\002\000\012\057\021\060\020" +
    "\061\022\113\110\001\002\000\032\002\uffd2\033\uffd2\036" +
    "\uffd2\042\uffd2\057\uffd2\060\uffd2\061\uffd2\107\uffd2\113\uffd2" +
    "\127\uffd2\130\uffd2\134\111\001\002\000\030\002\uffd1\033" +
    "\uffd1\036\uffd1\042\uffd1\057\uffd1\060\uffd1\061\uffd1\107\uffd1" +
    "\113\uffd1\127\uffd1\130\uffd1\001\002\000\006\112\106\134" +
    "\103\001\002\000\026\002\uffd5\033\uffd5\036\uffd5\042\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\113\uffd5\127\uffd5\130\uffd5\001" +
    "\002\000\030\002\uffd3\033\uffd3\036\uffd3\042\uffd3\057\uffd3" +
    "\060\uffd3\061\uffd3\107\uffd3\113\uffd3\127\uffd3\130\uffd3\001" +
    "\002\000\006\117\116\134\063\001\002\000\014\024\uffe6" +
    "\054\uffe6\107\uffe6\113\uffe6\134\uffe6\001\002\000\010\052" +
    "\140\104\uffb6\134\057\001\002\000\024\002\uffa7\033\123" +
    "\036\uffa7\057\uffa7\060\uffa7\061\uffa7\113\uffa7\127\uffa7\130" +
    "\uffa7\001\002\000\024\002\ufffa\033\ufffa\036\ufffa\057\ufffa" +
    "\060\ufffa\061\ufffa\113\ufffa\127\ufffa\130\ufffa\001\002\000" +
    "\024\002\uffa3\033\uffa3\036\220\057\uffa3\060\uffa3\061\uffa3" +
    "\113\uffa3\127\uffa3\130\uffa3\001\002\000\004\035\124\001" +
    "\002\000\004\134\057\001\002\000\026\002\uffa5\033\uffa5" +
    "\034\127\036\uffa5\057\uffa5\060\uffa5\061\uffa5\113\uffa5\127" +
    "\uffa5\130\uffa5\001\002\000\024\002\uffa8\033\uffa8\036\uffa8" +
    "\057\uffa8\060\uffa8\061\uffa8\113\uffa8\127\uffa8\130\uffa8\001" +
    "\002\000\010\052\140\104\uffb6\134\057\001\002\000\024" +
    "\002\uffc9\033\uffc9\036\uffc9\057\uffc9\060\uffc9\061\uffc9\113" +
    "\uffc9\127\uffc9\130\uffc9\001\002\000\024\002\uffc5\033\uffc5" +
    "\036\uffc5\057\uffc5\060\uffc5\061\uffc5\113\uffc5\127\uffc5\130" +
    "\uffc5\001\002\000\004\104\216\001\002\000\024\002\uffcd" +
    "\033\uffcd\036\uffcd\057\uffcd\060\uffcd\061\uffcd\113\uffcd\127" +
    "\214\130\uffcd\001\002\000\024\002\uffa6\033\uffa6\036\uffa6" +
    "\057\uffa6\060\uffa6\061\uffa6\113\uffa6\127\uffa6\130\212\001" +
    "\002\000\024\002\uffc6\033\uffc6\036\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\113\uffc6\127\uffc6\130\uffc6\001\002\000\024\002" +
    "\uffc7\033\uffc7\036\uffc7\057\uffc7\060\uffc7\061\uffc7\113\uffc7" +
    "\127\uffc7\130\uffc7\001\002\000\024\002\uffca\033\uffca\036" +
    "\uffca\057\uffca\060\uffca\061\uffca\113\uffca\127\uffca\130\uffca" +
    "\001\002\000\014\026\uffb7\027\uffb7\031\uffb7\053\uffb7\104" +
    "\uffb7\001\002\000\024\002\uffc8\033\uffc8\036\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\113\uffc8\127\uffc8\130\uffc8\001\002\000" +
    "\030\026\uffb6\027\uffb6\031\uffb6\052\140\067\153\121\146" +
    "\122\145\123\152\124\147\125\150\126\144\001\002\000" +
    "\010\026\166\027\167\031\170\001\002\000\020\012\uffb9" +
    "\056\uffb9\102\uffb9\112\uffb9\131\uffb9\133\uffb9\134\uffb9\001" +
    "\002\000\020\012\uffbd\056\uffbd\102\uffbd\112\uffbd\131\uffbd" +
    "\133\uffbd\134\uffbd\001\002\000\020\012\uffbe\056\uffbe\102" +
    "\uffbe\112\uffbe\131\uffbe\133\uffbe\134\uffbe\001\002\000\020" +
    "\012\uffbb\056\uffbb\102\uffbb\112\uffbb\131\uffbb\133\uffbb\134" +
    "\uffbb\001\002\000\020\012\uffba\056\uffba\102\uffba\112\uffba" +
    "\131\uffba\133\uffba\134\uffba\001\002\000\020\012\013\056" +
    "\161\102\157\112\015\131\160\133\162\134\057\001\002" +
    "\000\020\012\uffbc\056\uffbc\102\uffbc\112\uffbc\131\uffbc\133" +
    "\uffbc\134\uffbc\001\002\000\006\052\140\053\uffb6\001\002" +
    "\000\004\053\155\001\002\000\024\002\uffaa\033\uffaa\036" +
    "\uffaa\057\uffaa\060\uffaa\061\uffaa\113\uffaa\127\uffaa\130\uffaa" +
    "\001\002\000\024\002\uffbf\033\uffbf\036\uffbf\057\021\060" +
    "\020\061\022\113\uffbf\127\uffbf\130\uffbf\001\002\000\006" +
    "\012\013\112\015\001\002\000\024\002\uffc3\033\uffc3\036" +
    "\uffc3\057\uffc3\060\uffc3\061\uffc3\113\uffc3\127\uffc3\130\uffc3" +
    "\001\002\000\006\012\013\112\015\001\002\000\024\002" +
    "\uffc2\033\uffc2\036\uffc2\057\uffc2\060\uffc2\061\uffc2\113\uffc2" +
    "\127\uffc2\130\uffc2\001\002\000\024\002\uffc4\033\uffc4\036" +
    "\uffc4\057\uffc4\060\uffc4\061\uffc4\113\uffc4\127\uffc4\130\uffc4" +
    "\001\002\000\024\002\uffc0\033\uffc0\036\uffc0\057\021\060" +
    "\020\061\022\113\uffc0\127\uffc0\130\uffc0\001\002\000\024" +
    "\002\uffc1\033\uffc1\036\uffc1\057\021\060\020\061\022\113" +
    "\uffc1\127\uffc1\130\uffc1\001\002\000\004\133\211\001\002" +
    "\000\006\012\013\112\200\001\002\000\014\012\013\112" +
    "\015\131\172\133\173\134\057\001\002\000\024\002\uffb2" +
    "\033\uffb2\036\uffb2\057\021\060\020\061\022\113\uffb2\127" +
    "\uffb2\130\uffb2\001\002\000\024\002\uffb4\033\uffb4\036\uffb4" +
    "\057\uffb4\060\uffb4\061\uffb4\113\uffb4\127\uffb4\130\uffb4\001" +
    "\002\000\024\002\uffb3\033\uffb3\036\uffb3\057\uffb3\060\uffb3" +
    "\061\uffb3\113\uffb3\127\uffb3\130\uffb3\001\002\000\004\127" +
    "\176\001\002\000\024\002\uffb5\033\uffb5\036\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\113\uffb5\127\uffb5\130\uffb5\001\002\000" +
    "\014\012\013\112\015\131\172\133\173\134\057\001\002" +
    "\000\024\002\uffb8\033\uffb8\036\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\113\uffb8\127\uffb8\130\uffb8\001\002\000\012\012\013" +
    "\112\015\131\204\133\203\001\002\000\024\002\uffb0\033" +
    "\uffb0\036\uffb0\057\021\060\020\061\022\113\uffb0\127\uffb0" +
    "\130\uffb0\001\002\000\004\113\210\001\002\000\006\107" +
    "\uffac\113\uffac\001\002\000\006\107\uffad\113\uffad\001\002" +
    "\000\006\107\206\113\uffaf\001\002\000\006\131\204\133" +
    "\203\001\002\000\004\113\uffae\001\002\000\024\002\uffb1" +
    "\033\uffb1\036\uffb1\057\uffb1\060\uffb1\061\uffb1\113\uffb1\127" +
    "\uffb1\130\uffb1\001\002\000\024\002\uffab\033\uffab\036\uffab" +
    "\057\uffab\060\uffab\061\uffab\113\uffab\127\uffab\130\uffab\001" +
    "\002\000\010\052\140\104\uffb6\134\057\001\002\000\024" +
    "\002\uffcb\033\uffcb\036\uffcb\057\uffcb\060\uffcb\061\uffcb\113" +
    "\uffcb\127\uffcb\130\uffcb\001\002\000\010\052\140\104\uffb6" +
    "\134\057\001\002\000\024\002\uffcc\033\uffcc\036\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\113\uffcc\127\uffcc\130\uffcc\001\002" +
    "\000\006\012\013\112\015\001\002\000\024\002\uffa9\033" +
    "\uffa9\036\uffa9\057\021\060\020\061\022\113\uffa9\127\uffa9" +
    "\130\uffa9\001\002\000\004\035\222\001\002\000\024\002" +
    "\uffd0\033\uffd0\036\uffd0\057\uffd0\060\uffd0\061\uffd0\113\uffd0" +
    "\127\uffd0\130\uffd0\001\002\000\004\134\057\001\002\000" +
    "\030\002\uffa0\033\uffa0\036\uffa0\057\uffa0\060\uffa0\061\uffa0" +
    "\105\225\106\226\113\uffa0\127\uffa0\130\uffa0\001\002\000" +
    "\024\002\uffa4\033\uffa4\036\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\113\uffa4\127\uffa4\130\uffa4\001\002\000\024\002\uffa2\033" +
    "\uffa2\036\uffa2\057\uffa2\060\uffa2\061\uffa2\113\uffa2\127\uffa2" +
    "\130\uffa2\001\002\000\024\002\uffa1\033\uffa1\036\uffa1\057" +
    "\uffa1\060\uffa1\061\uffa1\113\uffa1\127\uffa1\130\uffa1\001\002" +
    "\000\024\002\uffcf\033\uffcf\036\uffcf\057\uffcf\060\uffcf\061" +
    "\uffcf\113\uffcf\127\uffcf\130\212\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\022\002\003\003\005\004\004\016\011\017" +
    "\013\020\006\021\010\022\007\001\001\000\002\001\001" +
    "\000\006\033\120\034\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\027\001\001\000\002\001\001\000" +
    "\006\003\015\004\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\024\004\004\001\001\000\006\003" +
    "\023\004\004\001\001\000\006\003\022\004\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\035\012\037" +
    "\025\042\026\033\027\051\030\047\031\030\032\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\057\030\065\001\001\000\006\026\057\030\064\001\001" +
    "\000\006\026\057\030\063\001\001\000\006\026\057\030" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\067" +
    "\001\001\000\006\025\071\026\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\077\012" +
    "\037\025\042\026\033\027\051\030\047\031\030\032\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\104\013\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\106\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\112\013\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\010\226" +
    "\011\132\026\141\035\136\040\127\041\131\043\140\046" +
    "\135\047\134\050\130\001\001\000\004\051\121\001\001" +
    "\000\002\001\001\000\004\053\220\001\001\000\002\001" +
    "\001\000\004\026\124\001\001\000\004\052\125\001\001" +
    "\000\002\001\001\000\026\010\133\011\132\026\141\035" +
    "\136\040\127\041\131\043\140\046\135\047\134\050\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\150\041\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\155" +
    "\004\004\026\162\001\001\000\002\001\001\000\004\041" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\164\004\004\001\001\000\002\001" +
    "\001\000\006\003\163\004\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\200\004\004\001\001\000\012" +
    "\003\170\004\004\026\174\042\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\170\004\004\026\174\042" +
    "\176\001\001\000\002\001\001\000\012\003\015\004\004" +
    "\044\201\045\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\206\045\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\010\212\011\132" +
    "\026\141\035\136\040\127\041\131\043\140\046\135\047" +
    "\134\050\130\001\001\000\002\001\001\000\026\010\214" +
    "\011\132\026\141\035\136\040\127\041\131\043\140\046" +
    "\135\047\134\050\130\001\001\000\002\001\001\000\006" +
    "\003\216\004\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\222\001\001\000\004" +
    "\054\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DBParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DBParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DBParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
return getScanner().next_token();
    }


	ErrorMsg.ErrorMsg errorMsg;
	public DBParser(java_cup.runtime.Scanner s, ErrorMsg.ErrorMsg errorMsg){
		super(s);
		this.errorMsg = errorMsg;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DBParser$actions {
  private final DBParser parser;

  /** Constructor */
  CUP$DBParser$actions(DBParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DBParser$do_action(
    int                        CUP$DBParser$act_num,
    java_cup.runtime.lr_parser CUP$DBParser$parser,
    java.util.Stack            CUP$DBParser$stack,
    int                        CUP$DBParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DBParser$result;

      /* select the action based on the action number */
      switch (CUP$DBParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ascOrDesc ::= 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("ascOrDesc",42, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ascOrDesc ::= DESC 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("ascOrDesc",42, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ascOrDesc ::= ASC 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("ascOrDesc",42, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // orderByList ::= 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("orderByList",41, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // orderByList ::= ORDER BY fieldID ascOrDesc 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("orderByList",41, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // havingCondition ::= 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("havingCondition",40, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // havingCondition ::= HAVING conditionList 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("havingCondition",40, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // groupByList ::= 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("groupByList",39, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // groupByList ::= GROUP BY fieldID havingCondition 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("groupByList",39, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // notExistExp ::= isNot EXISTS queryExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("notExistExp",38, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // nullExp ::= fieldID IS isNot NULL 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("nullExp",37, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // likeExp ::= fieldID isNot LIKE STRING 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("likeExp",36, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // value ::= STRING 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("value",35, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // value ::= NUMBER 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("value",35, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valueList ::= value COMMA valueList 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("valueList",34, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valueList ::= value 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("valueList",34, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // inOrNotExp ::= fieldID isNot IN queryExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("inOrNotExp",33, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // inOrNotExp ::= fieldID isNot IN LPAREN valueList RPAREN 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("inOrNotExp",33, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comparable ::= queryExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("comparable",32, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comparable ::= STRING 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("comparable",32, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // comparable ::= NUMBER 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("comparable",32, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // comparable ::= fieldID 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("comparable",32, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // isNot ::= 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("isNot",31, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // isNot ::= NOT 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("isNot",31, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // rangeExp ::= fieldID isNot BETWEEN comparable AND comparable 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("rangeExp",30, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // compareOp ::= GE 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("compareOp",28, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // compareOp ::= GT 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("compareOp",28, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // compareOp ::= LE 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("compareOp",28, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // compareOp ::= LT 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("compareOp",28, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // compareOp ::= NEQ 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("compareOp",28, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // compareOp ::= EQ 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("compareOp",28, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // compareExp ::= fieldID compareOp queryExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("compareExp",27, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // compareExp ::= fieldID compareOp ALL queryExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("compareExp",27, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // compareExp ::= fieldID compareOp ANY queryExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("compareExp",27, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // compareExp ::= fieldID compareOp STRING 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("compareExp",27, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // compareExp ::= fieldID compareOp NUMBER 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("compareExp",27, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // compareExp ::= fieldID compareOp fieldID 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("compareExp",27, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condition ::= notExistExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condition ::= nullExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condition ::= likeExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condition ::= inOrNotExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condition ::= rangeExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condition ::= compareExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // conditionList ::= conditionList OR conditionList 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("conditionList",6, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // conditionList ::= condition AND conditionList 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("conditionList",6, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // conditionList ::= condition 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("conditionList",6, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // whereList ::= 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("whereList",26, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // whereList ::= WHERE conditionList 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("whereList",26, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // optionalList ::= whereList groupByList orderByList 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("optionalList",25, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relation ::= LPAREN queryExp RPAREN ID 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("relation",9, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relation ::= LPAREN queryExp RPAREN 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("relation",9, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relation ::= ID ID 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("relation",9, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relation ::= ID 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("relation",9, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relationList ::= relation COMMA relationList 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("relationList",5, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relationList ::= relation 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("relationList",5, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // aggregationOp ::= MAX 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("aggregationOp",24, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // aggregationOp ::= MIN 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("aggregationOp",24, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // aggregationOp ::= AVG 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("aggregationOp",24, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // aggregationOp ::= SUM 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("aggregationOp",24, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // aggregationOp ::= COUNT 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("aggregationOp",24, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // aggrAttribute ::= aggregationOp LPAREN distinctOrAll columnID RPAREN 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("aggrAttribute",23, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mathArg ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("mathArg",22, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mathArg ::= NUMBER 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("mathArg",22, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mathArg ::= fieldID 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("mathArg",22, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mathExp ::= mathArg DEVIDE mathArg 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("mathExp",21, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mathExp ::= mathArg STAR mathArg 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("mathExp",21, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mathExp ::= mathArg MINUS mathArg 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("mathExp",21, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mathExp ::= mathArg PLUS mathArg 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("mathExp",21, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fieldID ::= ID DOT ID 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("fieldID",20, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fieldID ::= ID 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("fieldID",20, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // columnID ::= ID DOT STAR 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("columnID",19, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // columnID ::= STAR 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("columnID",19, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // columnID ::= fieldID 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("columnID",19, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // attribute ::= aggrAttribute 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("attribute",8, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // attribute ::= STRING 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("attribute",8, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // attribute ::= mathExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("attribute",8, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // attribute ::= columnID 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("attribute",8, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nickName ::= 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("nickName",18, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nickName ::= AS ID 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("nickName",18, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nickName ::= ID 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("nickName",18, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // attributeList ::= attribute nickName COMMA attributeList 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("attributeList",4, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // attributeList ::= attribute nickName 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("attributeList",4, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // distinctOrAll ::= 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("distinctOrAll",17, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // distinctOrAll ::= ALL 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("distinctOrAll",17, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // distinctOrAll ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("distinctOrAll",17, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // selFrom ::= SELECT distinctOrAll attributeList FROM relationList 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("selFrom",2, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // queryExp ::= queryExp INTERSECT queryExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("queryExp",1, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // queryExp ::= queryExp UNION queryExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("queryExp",1, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // queryExp ::= queryExp EXCEPT queryExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("queryExp",1, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // queryExp ::= LPAREN queryExp RPAREN 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("queryExp",1, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // queryExp ::= selFrom optionalList 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("queryExp",1, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= alterExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= deleteExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= insertExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction ::= createExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruction ::= updateExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instruction ::= queryExp 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instruction EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		RESULT = start_val;
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DBParser$parser.done_parsing();
          return CUP$DBParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

